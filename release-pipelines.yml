
# This file configures a build system in Azure Pipelines.
# https://dev.azure.com/donaldlab/osprey/_build
# Osprey uses it to build the code on multiple platforms (eg Linux, Windos, Mac),
# so deveploers don't need to find computers with the right hardware/OS combo to make releases.

# This pipeline is for manually packaging releases on the Osprey 4 website.
# If you're looking for CI/CD builds, try the ci-pipelines.yml file.


# Azure Pipelines YAML reference:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema/?view=azure-pipelines


# don't automatically trigger builds from commits, this is for manual releases only
trigger: none

jobs:

  - job: build

    timeoutInMinutes: 20

    strategy:
      matrix:
        Linux:
          imageName: ubuntu-20.04
          # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md
          # provides: JDK 17.0.2+8, Python 3.8.10, Pip 20.0.2
          gradleWrapper: gradlew
        Mac:
          imageName: macOS-11
          # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-11-Readme.md
          # provides: JDK 17.0.2+8, Python 3.9.10, Pip 21.3.1
          gradleWrapper: gradlew
        Windows:
          imageName: windows-2019
          # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
          # provides: JDK 17.0.2+8, Python 3.7.9, Pip 22.0.2
          gradleWrapper: gradlew.bat

    pool:
      vmImage: $(imageName)

    steps:
      # Azure task catalog:
      # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/?view=azure-devops
      # Predefined variables:
      # https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml

      - task: JavaToolInstaller@0
        # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/java-tool-installer?view=azure-devops
        inputs:
          # JDK 17 (by Eclipse Temurin) is installed by default on Microsoft agents, all three platforms
          # https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml#software
          versionSpec: '17'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'

      - task: UsePythonVersion@0
        # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/use-python-version?view=azure-devops
        inputs:
          versionSpec: '3.x'
          addToPath: true
          architecture: 'x64'

      - script: |
          pip install wheel setuptools

      - task: Gradle@3
        # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/gradle?view=azure-devops
        inputs:
          gradleWrapperFile: $(gradleWrapper)
          options: '-PAZURE_BUILD_ID=$(Build.BuildId)'
          gradleOptions: '-Dosprey.buildSrc.skipTests=true'
          tasks: 'desktopRelease serverRelease'

      - task: Gradle@3
        condition: eq(variables['Agent.JobName'], 'build Linux')
        inputs:
          gradleWrapperFile: $(gradleWrapper)
          options: '-PAZURE_BUILD_ID=$(Build.BuildId)'
          tasks: 'serviceRelease serviceDockerPrep'

      - task: Bash@3
        # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/bash?view=azure-devops
        condition: eq(variables['Agent.JobName'], 'build Linux')
        inputs:
          filePath: buildSrc/src/main/docker/service/build.sh

      - task: Gradle@3
        condition: eq(variables['Agent.JobName'], 'build Linux')
        inputs:
          gradleWrapperFile: $(gradleWrapper)
          options: '-PAZURE_BUILD_ID=$(Build.BuildId)'
          tasks: 'serviceDockerRelease'

      - task: PublishPipelineArtifact@1
        # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/publish-pipeline-artifact?view=azure-devops
        inputs:
          targetPath: build/releases
